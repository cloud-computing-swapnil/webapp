name: Build the Packer AMI Template

env:
  AWS_REGION: us-east-1

on:
  push:
    branches: [main]
jobs:
  packer_init_validate_build:
    runs-on: ubuntu-latest
    name: Build AWS Custom AMI with Node Application artifacts
    steps: 
      - name: Step 1 - Checkout code from branch
        uses: actions/checkout@v2

      - name: Step 2 - zip all the webApp files
        run: |
          zip -r webApp.zip ./
          pwd ./webApp
      
      - name: Step 3 - Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.ACCESS_SECRET }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Step 4 - Packer Init
        uses: hashicorp/packer-github-actions@master
        with:
          command: init
          target: ami-package.pkr.hcl

      - name: Step 5 - Validate Packer Template
        uses: hashicorp/packer-github-actions@master
        with:
          command: validate
          arguments: -syntax-only
          target: ami-package.pkr.hcl

      - name: Step 6 - Build Artifacts and create Custom AMI from Packer Build
        uses: hashicorp/packer-github-actions@master
        with:
          command: build
          arguments: "-color=false -on-error=abort"
          target: ami-package.pkr.hcl

      - name: Step 7 - Authenticate AWS CLI
        run: aws configure set aws_access_key_id ${{ secrets.AWS_DEMO_ACCESS_KEY }} && aws configure set aws_secret_access_key ${{ secrets.AWS_DEMO_SECRET_KEY }} && aws configure set default.region us-east-1
      - name: Step 3 - Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_DEMO_ACCESS_KEY  }}
          aws-secret-access-key: ${{ secrets.AWS_DEMO_SECRET_KEY}}
          aws-region: us-east-1
      - name: Create New Launch Template Version
        run: |
              latestAmi=$(aws ec2 describe-images --filters "Name=owner-id,Values=299843010665" --query "sort_by(Images, &CreationDate)[-1].[ImageId]" --output "text")
              echo "latest ami:"
              echo $latestAmi
              aws ec2 create-launch-template-version --launch-template-id $TEMPLATE_ID --launch-template-data "ImageId=$latestAmi" --source-version 1 | grep LaunchTemplateVersionId | awk '{print $2}' | tr -d '",'
        env:
               AWS_REGION: us-east-1
               TEMPLATE_ID: lt-00a18a9760b0cc913
      - name: Instance Refresh

        run: | 
              aws autoscaling start-instance-refresh --auto-scaling-group-name autoscaling_group --preferences '{"InstanceWarmup": 300, "MinHealthyPercentage": 50}'
        env:
               AWS_REGION: us-east-1
               TEMPLATE_ID: lt-00a18a9760b0cc913
